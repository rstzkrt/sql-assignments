BEGIN
  FOR c IN ( SELECT table_name FROM user_tables)
  LOOP
    EXECUTE IMMEDIATE 'DROP TABLE ' || c.table_name || ' CASCADE CONSTRAINTS' ;
  END LOOP;
END;
 
/

BEGIN
  FOR c IN ( SELECT sequence_name FROM user_sequences WHERE sequence_name NOT LIKE '%$%')
  LOOP
    EXECUTE IMMEDIATE 'DROP SEQUENCE ' || c.sequence_name;
  END LOOP;
END;
/

-- Table: AGENCY
CREATE TABLE AGENCY (
    agency_ID integer  NOT NULL,
    agency_name varchar2(25)  NOT NULL,
    agency_address varchar2(75)  NOT NULL,
    CONSTRAINT AGENCY_pk PRIMARY KEY (agency_ID)
) ;

-- Table: BRANDS
CREATE TABLE BRANDS (
    brand_ID integer  NOT NULL,
    brand_name varchar2(30)  NOT NULL,
    brand_model varchar2(20)  NOT NULL,
    CONSTRAINT BRANDS_pk PRIMARY KEY (brand_ID)
) ;

-- Table: CARS
CREATE TABLE CARS (
    car_ID integer  NOT NULL,
    fuel_type varchar2(10)  NOT NULL,
    BRANDS_brand_ID integer  NOT NULL,
    AGENCY_agency_ID integer  NOT NULL,
    Engine_engine_ID integer  NOT NULL,
    door_number integer  NOT NULL,
    CONSTRAINT CARS_pk PRIMARY KEY (car_ID)
) ;

-- Table: CAR_COLOR
CREATE TABLE CAR_COLOR (
    car_color_ID integer  NOT NULL,
    CARS_car_ID integer  NOT NULL,
    COLOR_color_ID integer  NOT NULL,
    CONSTRAINT CAR_COLOR_pk PRIMARY KEY (car_color_ID)
) ;

-- Table: COLOR
CREATE TABLE COLOR (
    color_ID integer  NOT NULL,
    color_name varchar2(10)  NOT NULL,
    CONSTRAINT COLOR_pk PRIMARY KEY (color_ID)
) ;

-- Table: Customer
CREATE TABLE Customer (
    customer_name varchar2(20)  NOT NULL,
    customer_ID integer  NOT NULL,
    customer_address varchar2(75)  NOT NULL,
    customer_surname varchar2(20)  NOT NULL,
    date_of_birth date  NOT NULL,
    CONSTRAINT Customer_pk PRIMARY KEY (customer_ID)
) ;

-- Table: Engine
CREATE TABLE Engine (
    engine_ID integer  NOT NULL,
    engine_name varchar2(10)  NULL,
    engine_size number(5,4)  NOT NULL,
    CONSTRAINT Engine_pk PRIMARY KEY (engine_ID)
) ;

-- Table: Rental
CREATE TABLE Rental (
    rental_ID integer  NOT NULL,
    Customer_column_ID integer  NOT NULL,
    cost number(10,2)  NOT NULL,
    rental_date date  NOT NULL,
    CARS_car_ID integer  NOT NULL,
    CONSTRAINT Rental_pk PRIMARY KEY (rental_ID)
) ;

-- foreign keys
-- Reference: CARS_AGENCY (table: CARS)
ALTER TABLE CARS ADD CONSTRAINT CARS_AGENCY
    FOREIGN KEY (AGENCY_agency_ID)
    REFERENCES AGENCY (agency_ID);

-- Reference: CARS_BRANDS (table: CARS)
ALTER TABLE CARS ADD CONSTRAINT CARS_BRANDS
    FOREIGN KEY (BRANDS_brand_ID)
    REFERENCES BRANDS (brand_ID);

-- Reference: CARS_Engine (table: CARS)
ALTER TABLE CARS ADD CONSTRAINT CARS_Engine
    FOREIGN KEY (Engine_engine_ID)
    REFERENCES Engine (engine_ID);

-- Reference: CAR_COLOR_COLOR (table: CAR_COLOR)
ALTER TABLE CAR_COLOR ADD CONSTRAINT CAR_COLOR_COLOR
    FOREIGN KEY (COLOR_color_ID)
    REFERENCES COLOR (color_ID);

-- Reference: CAR_PROPRETIES_CARS (table: CAR_COLOR)
ALTER TABLE CAR_COLOR ADD CONSTRAINT CAR_PROPRETIES_CARS
    FOREIGN KEY (CARS_car_ID)
    REFERENCES CARS (car_ID);

-- Reference: Rental_CARS (table: Rental)
ALTER TABLE Rental ADD CONSTRAINT Rental_CARS
    FOREIGN KEY (CARS_car_ID)
    REFERENCES CARS (car_ID);

-- Reference: Rental_Customer (table: Rental)
ALTER TABLE Rental ADD CONSTRAINT Rental_Customer
    FOREIGN KEY (Customer_column_ID)
    REFERENCES Customer (customer_ID);

-- End of file.

CREATE SEQUENCE agency_seq
START WITH 1
INCREMENT BY 1;

INSERT INTO agency(agency_ID,agency_name,agency_address) 
VALUES(agency_seq.nextval,'Rent a Car','POLAND');
INSERT INTO agency(agency_ID,agency_name,agency_address) 
VALUES(agency_seq.nextval,'Rent Center','England');
INSERT INTO agency(agency_ID,agency_name,agency_address) 
VALUES(agency_seq.nextval,'RentaLL','France');   

CREATE SEQUENCE customer_seq
START WITH 1
INCREMENT BY 1;

INSERT INTO Customer(customer_name,customer_ID,customer_address,customer_surname,date_of_birth)
VALUES('JOHN',customer_seq.nextval,'USA','SMITH',TO_DATE('1965-06-05', 'YYYY-MM-DD'));
INSERT INTO Customer(customer_name,customer_ID,customer_address,customer_surname,date_of_birth)
VALUES('TOMAS',customer_seq.nextval,'PL','PONCZAK',TO_DATE('1989-12-01', 'YYYY-MM-DD'));
INSERT INTO Customer(customer_name,customer_ID,customer_address,customer_surname,date_of_birth)
VALUES('ALI',customer_seq.nextval,'TR','ELMA',TO_DATE('1995-09-24', 'YYYY-MM-DD'));

CREATE SEQUENCE brand_seq
START WITH 1
INCREMENT BY 1;

INSERT INTO BRANDS(brand_ID,brand_name,brand_model)
VALUES(brand_seq.nextval,'BMW','M1');
INSERT INTO BRANDS(brand_ID,brand_name,brand_model)
VALUES(brand_seq.nextval,'MERCEDES','GT63');
INSERT INTO BRANDS(brand_ID,brand_name,brand_model)
VALUES(brand_seq.nextval,'PORSCHE','CAYMAN');

UPDATE BRANDS
SET brand_model = '911'
WHERE brand_model='CAYMAN';

CREATE SEQUENCE engine_seq
START WITH 11
INCREMENT BY 1;

INSERT INTO Engine(engine_ID,engine_name,engine_size)
VALUES(engine_seq.nextval,'N74','6'); 
INSERT INTO Engine(engine_ID,engine_name,engine_size)
VALUES(engine_seq.nextval,'M277','7'); 
INSERT INTO Engine(engine_ID,engine_name,engine_size)
VALUES(engine_seq.nextval,'TURBOS','4'); 

select * from engine;

CREATE SEQUENCE color_seq
START WITH 1
INCREMENT BY 1;

INSERT INTO color(color_ID,color_name)
VALUES(color_seq.nextval,'BLUE');
INSERT INTO color(color_ID,color_name)
VALUES(color_seq.nextval,'RED');
INSERT INTO color(color_ID,color_name)
VALUES(color_seq.nextval,'GREEN');
INSERT INTO color(color_ID,color_name)
VALUES(color_seq.nextval,'SILVER');

CREATE SEQUENCE cars_seq
START WITH 1
INCREMENT BY 1;

INSERT INTO CARS(car_ID,fuel_type,BRANDS_brand_ID,AGENCY_agency_ID,ENGINE_engine_ID,door_number)
VALUES(cars_seq.nextval,'gas',1,1,11,4);
INSERT INTO CARS(car_ID,fuel_type,BRANDS_brand_ID,AGENCY_agency_ID,ENGINE_engine_ID,door_number)
VALUES(cars_seq.nextval,'hybrid',2,2,12,2);
INSERT INTO CARS(car_ID,fuel_type,BRANDS_brand_ID,AGENCY_agency_ID,ENGINE_engine_ID,door_number)
VALUES(cars_seq.nextval,'electric',3,3,13,2);

CREATE SEQUENCE rental_seq
START WITH 1
INCREMENT BY 1;

INSERT INTO Rental(rental_ID,CUSTOMER_column_ID,cost,rental_date,CARS_car_ID)
VALUES(rental_seq.nextval,1,500,SYSDATE,1);
INSERT INTO Rental(rental_ID,CUSTOMER_column_ID,cost,rental_date,CARS_car_ID)
VALUES(rental_seq.nextval,2,1000,SYSDATE,2);
INSERT INTO Rental(rental_ID,CUSTOMER_column_ID,cost,rental_date,CARS_car_ID)
VALUES(rental_seq.nextval,3,2500,SYSDATE,3);



CREATE SEQUENCE car_color_seq
START WITH 1
INCREMENT BY 1;

INSERT INTO car_color(car_color_ID,CARS_car_ID,COLOR_color_ID)
VALUES(car_color_seq.nextval,2,1);
INSERT INTO car_color(car_color_ID,CARS_car_ID,COLOR_color_ID)
VALUES(car_color_seq.nextval,1,3);
INSERT INTO car_color(car_color_ID,CARS_car_ID,COLOR_color_ID)
VALUES(car_color_seq.nextval,3,3);


ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';

-- table for test
CREATE TABLE Rental_Modified (
    rental_modified_ID integer NOT NULL,
    rental_ID integer  NOT NULL,
    Customer_column_ID integer  NOT NULL,
    cost number(10,2)  NOT NULL,
    new_cost number(10,2) NOT NULL,
    rental_date date  NOT NULL,
    modified_date date NOT NULL,
    CARS_car_ID integer  NOT NULL,
    usr varchar2(50) NOT NULL,
    CONSTRAINT Rental_modified_pk PRIMARY KEY (rental_modified_ID)
) ;

CREATE SEQUENCE rental_modified_seq
START WITH 1
INCREMENT BY 1;

                        
---------------------------------------TRIGGERS------------------------------------------------------
set serveroutput on;
--this is the delete trigger which doesnt allow us to delete cars more expensive than 200$
CREATE OR REPLACE TRIGGER trg_delete_rental
BEFORE DELETE ON RENTAL
    FOR EACH ROW
DECLARE
    PRAGMA AUTONOMOUS_TRANSACTION;
    r_cost_over_200 EXCEPTION;
    CURSOR c_rentals IS SELECT 1 FROM RENTAL WHERE rental_ID = :OLD.rental_ID AND cost > 200;
    r_rentals c_rentals%ROWTYPE;
BEGIN
    OPEN c_rentals;
    FETCH c_rentals INTO r_rentals;
    IF c_rentals%FOUND THEN
        RAISE r_cost_over_200;
    END IF;
    CLOSE c_rentals;
    COMMIT;
    EXCEPTION
        WHEN r_cost_over_200 THEN
            RAISE_APPLICATION_ERROR(-20100, 'You cannot delete rentals with a rental cost over $200.0!');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;
/
DELETE FROM RENTAL WHERE cost=2500;
select * from rental;

--the trigger for inserting rentals , deosnt allow more than one person to rent the same car 
CREATE OR REPLACE TRIGGER trg_insert_rental
BEFORE INSERT ON RENTAL
    FOR EACH ROW
DECLARE
    rental_exists EXCEPTION;
    CURSOR c_rentals IS SELECT 1 FROM RENTAL WHERE CUSTOMER_COLUMN_ID = :NEW.CUSTOMER_COLUMN_ID;
    r_rentals c_rentals%ROWTYPE;
BEGIN
    OPEN c_rentals;    
    FETCH c_rentals INTO r_rentals;
    IF c_rentals%FOUND THEN
        RAISE rental_exists;
    END IF;
    EXCEPTION
        WHEN rental_exists THEN
            RAISE_APPLICATION_ERROR(-20100, 'You cannot rent two cars at the same time!');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;
/
--here im adding the exisnting(already rented)car
INSERT INTO Rental(rental_ID,CUSTOMER_column_ID,cost,rental_date,CARS_car_ID)
VALUES(rental_seq.nextval,1,500,SYSDATE,1);

select * from rental; 

--trigger for updating rentals cost, because our company doesnt care about cheap cars less than 200$(they dont want to invest money for cheap cars)
create or replace TRIGGER trg_update_rental
BEFORE UPDATE ON RENTAL
    FOR EACH ROW
DECLARE
    PRAGMA AUTONOMOUS_TRANSACTION;
    invalid_cost EXCEPTION;
    usr varchar2(50);
    CURSOR c_rentals IS SELECT 1 FROM RENTAL WHERE rental_ID = :OLD.rental_ID;
    r_rentals c_rentals%ROWTYPE;
BEGIN
    IF :NEW.cost < 200 THEN
        RAISE invalid_cost;
    END IF;
    OPEN c_rentals;
    FETCH c_rentals INTO r_rentals;
    SELECT USER INTO usr FROM dual;
    INSERT INTO RENTAL_MODIFIED
    VALUES (rental_modified_seq.nextval, :OLD.rental_ID, :OLD.customer_column_ID, :OLD.cost, :NEW.cost, :OLD.rental_date, SYSDATE, :OLD.cars_car_ID, usr);
    DBMS_OUTPUT.PUT_LINE ('One record has been updated and saved into the RENTAL_MODIFIED table!');
    CLOSE c_rentals;
    COMMIT;
    EXCEPTION
        WHEN invalid_cost THEN
            RAISE_APPLICATION_ERROR(-20100, 'Only records with a rental cost of $200.00 and above are recorded in the RENTAL_MODIFIED table!');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
   
END;
/

UPDATE RENTAL SET COST = '199' WHERE cost ='500';
select * from rental;


---------------------------------------------------------PROCEDURES------------------------------------------------------
--adds engine if doesnt exist in database 
create or replace PROCEDURE "ADD_ENGINE"(e_name VARCHAR2,e_size VARCHAR2)
IS
last_id NUMBER;
e_exists EXCEPTION;
count_id NUMBER;
CURSOR c_engines IS SELECT 1 FROM ENGINE WHERE engine_name = e_name;
r_engines c_engines%ROWTYPE;
BEGIN
    OPEN c_engines;    
    FETCH c_engines INTO r_engines;
    IF c_engines%FOUND THEN
        RAISE e_exists;
    ELSE
        SELECT MAX(engine_ID) + 1 INTO last_id FROM ENGINE;
        INSERT INTO ENGINE VALUES(last_id, e_name, e_size);
        DBMS_OUTPUT.PUT_LINE('Engine:(' || e_name || ') is added with ID:(' || last_id || ')');
    END IF;
    CLOSE c_engines;
    EXCEPTION
        WHEN e_exists THEN
            RAISE_APPLICATION_ERROR(-20100,'Engine:(' || e_name || ') is already exists!');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;
/

exec ADD_ENGINE('N74',5);

select * from engine;

--adds rental record if the customer is registered before if not we want them to register first  
create or replace procedure "ADD_RENTAL"(cus_name VARCHAR2, cus_surname VARCHAR2, cus_address VARCHAR2, cus_date_of_birth DATE, r_cost NUMBER, r_car_ID NUMBER)
IS 
last_id NUMBER;
cus_ID NUMBER;
cus_not_found EXCEPTION;
rental_exists EXCEPTION;
CURSOR c_rentals IS SELECT 1 FROM RENTAL WHERE customer_column_ID = (SELECT customer_ID FROM CUSTOMER WHERE customer_name = cus_name AND customer_surname = cus_surname AND customer_address = cus_address AND date_of_birth = cus_date_of_birth);
r_rentals c_rentals%ROWTYPE;
begin
    SELECT customer_ID INTO cus_ID FROM CUSTOMER WHERE customer_name = cus_name AND customer_surname = cus_surname AND customer_address = cus_address AND date_of_birth = cus_date_of_birth;
    OPEN c_rentals;    
    FETCH c_rentals INTO r_rentals;
    IF c_rentals%FOUND THEN
        RAISE rental_exists;
    ELSE
        SELECT MAX(rental_ID) + 1 INTO last_id FROM RENTAL;
        INSERT INTO RENTAL VALUES(last_id, cus_ID, r_cost, SYSDATE, r_car_ID);
        DBMS_OUTPUT.PUT_LINE('Customer:('|| cus_name || ' ' || cus_surname ||') rented a car with ID:(' || last_id || ')');
    END IF;
    CLOSE c_rentals;
    EXCEPTION
        WHEN no_data_found THEN
            RAISE_APPLICATION_ERROR(-20100,'Customer:('|| cus_name || ' ' || cus_surname ||') not found! , You need to register first !');
        WHEN rental_exists THEN
            RAISE_APPLICATION_ERROR(-20100,'Customer:('|| cus_name || ' ' || cus_surname ||') already has a rental car!');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
end;
/
exec ADD_RENTAL('resat','ozkurt','poland',TO_DATE('1965-06-05', 'YYYY-MM-DD'),400,1);


--shows all the cars in given agency name
create or replace procedure "PRINT_AGENCY_CARS"(a_name VARCHAR2)
is
a_count NUMBER(1);
c_not_found EXCEPTION;
a_not_exists EXCEPTION;
cursor c_cars is
    SELECT b.brand_name, b.brand_model, c.car_ID, c.fuel_type, c.door_number, e.engine_name, e.engine_size
    FROM BRANDS b
    INNER JOIN CARS c on b.brand_ID = c.brands_brand_ID
    INNER JOIN ENGINE e on c.engine_engine_ID = e.engine_ID
    INNER JOIN AGENCY a on c.agency_agency_ID = a.agency_ID
    WHERE a.agency_name = a_name;
r_cars c_cars%ROWTYPE;
begin
    SELECT COUNT(*) INTO a_count FROM AGENCY WHERE agency_name = a_name;
    IF a_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20100,'Agency:(' || a_name || ') does not exists!');
    END IF;
    open c_cars;
    loop
        fetch c_cars into r_cars;
        EXIT WHEN c_cars%NOTFOUND;
        DBMS_OUTPUT.put_line('Car ID: '|| r_cars.car_ID ||', Brand: ' || r_cars.brand_name ||', Model: '|| r_cars.brand_model ||', Fuel type: '|| r_cars.fuel_type ||', Doors: '|| r_cars.door_number ||', Engine: '|| r_cars.engine_name ||' Engine size: '|| r_cars.engine_size);
    end loop;
    IF c_cars%rowcount = 0 THEN
        RAISE c_not_found;
    END IF;
    close c_cars;
    EXCEPTION
        WHEN c_not_found THEN
            RAISE_APPLICATION_ERROR(-20100,'Agency:(' || a_name || ') does not have any car.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
end;
/

exec PRINT_AGENCY_CARS('RentaLL');